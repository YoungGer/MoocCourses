pVals <- c(pAlt,pNull)
cbum[i,j,k] <- CBUM(pVals)[1]
bumMod <-  fitBumModel(pVals,plot=FALSE)
bum[i,j,k] <- bumMod$lambda + (1-bumMod$lambda)*bumMod$a
storey[i,j,k] <- qvalue(pVals)$pi0
}
print(c(i,j))
}
}
meanStorey <- apply(storey,c(1,2),mean)
meanBum <- apply(bum,c(1,2),mean)
meanCbum <- apply(cbum,c(1,2),mean)
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1),col="grey")
bum[i,j,k] <- bumMod$lambda + (1-bumMod$lambda)*bumMod$a
source('~/Desktop/pi0.R')
meanStorey <- apply(storey,c(1,2),mean)
meanBum <- apply(bum,c(1,2),mean)
meanCbum <- apply(cbum,c(1,2),mean)
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1),col="grey")
?CBUM
xx <- vector(NA,mode="list",length=10)
?vect
?vector
xx <- vector(mode="list",length=10)
xx
xx <- xx + 1
xx
library(IRanges)
?Rle
ll <- vector(mode="list",length=20)
for(i in 1:20){ll[[i]]<- Rle(rbinom(1e7,size=3,prob=0.05))}
system.time(Reduce(ll,"+"))
system.time(Reduce("+",ll))
?DataFrame
?as.DataFrame
?
DF <- DataFrame(ll)
DF <- DataFrame(ll)
Df
DF
dim(DF)
system.time(Reduce("+",ll))
ll2 <- as.list(DF)
class(DF)
class(ll2)
?Qr
mod <- cbind(repmod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
)
mod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
h1 <- solve(t(mod) %*% mod) %*% mod
h1 <- solve(t(mod) %*% mod) %*% t(mod)
dim(h1)
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
dim(h1)
h1 <- t(mod) %*% solve(mod %*% t(mod)) %*% mod
solve(t(mod) %*% mod)
t(mod) %*% solve(t(mod) %*% mod)
mod%*% solve(t(mod) %*% mod)
mod %*% solve(t(mod) %*% mod)
dim(mod %*% solve(t(mod) %*% mod))
dim(mod %*% solve(t(mod) %*% mod) %*% t(mod))
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
y <- rnorm(20)
h1 %*5 y
h1 %*% y
object.size(DF)
?object.size
object.size(DF,units="Gb")
aa <- object.size(DF)
print(aa,units="Gb")
aa <- object.size(ll)
print(aa,units="Gb")
library(Matrix)
?sparseMatrix
bb <- rbinom(1e7,size=1,prob=0.5)
object.size(bb)
object.size(as.vector(ll[[1]]))
cbind(ll)
df2 <- as.matrix(DF)
object.size(df)
object.size(df2)
df2[1,]
df2 <- as.data.frame(DF)
object.size(df2)
mm <- Matrix(as.matrix(df2))
object.size(mm)
object.size(ll)
object.size(ll)/object.size(mm)
dim(h1)
tmp <- solve(h1,mm)
tmp
aa <- solve(mod,mm)
dim(mod)
aa <- solve(t(mod),mm)
dim(mm)
mm[1,]
class(mm)
tmp <- mm %*% h1
class(tmp)
object.size(tmp)
object.size(tmp)/object.size(mm)
print(object.size(tmp),units="gb")
print(object.size(tmp),units="Gb")
tmp[1,]
mm[1,]
mean(mm[1,1:10])
mean(mm[1,21:30])
mean(mm[1,11:20])
tmp[2,]
mean(mm[1,1:10])
tmp[3,]
mean(mm[3,1:10])
mm <- Matrix(as.matrix(df2))
rowSums(mm)
aa <- rowSums(mm)
class(aa)
length(aa)
dat <- mm
dim(dat)
rm(mm)
ls()
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,)
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,y)
rm(aa)
rm(bb)
ls()
class(dat)
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
7 * 20
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
rss0[1,]
length(rss0)
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
fstats[1]
gc()
fstats <- function(dat,mod,mod0=NULL){
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
rm(rss0,rss1)
gc()
return(fstats)
}
ls()
rm(fstats)
rm(Id)
rm(df0)
rm(df1)
rm(rss0)
rm(rss1)
ls()
rm(n)
rm(p)
rm(m)
gc()
mem_change <- function(code) {
start <- mem()
expr <- substitute(code)
eval(expr, parent.frame())
rm(code, expr)
round(mem() - start, 3)
}
mem_change(fstats(dat,mod,md0))
mem_change(fstats(dat,mod,mod0))
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem()
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem_change(fstats(dat,mod,mod0))
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
mem_change(fstats(dat,mod,mod0))
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
twitterMap
args(twitterMap)
twitterMap("IrvingChamber",userLocation="Missouri")
setwd("~/Dropbox/Jeff/teaching/2013/modules/03_ObtainingData/007readingXML/")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL('index.html')
getwd()
setwd("../008readingJSON/")
slidify("index.Rm")
slidify("index.Rmd")
browseURL("index.html")
install.packages("jsonlite")
library(jsonlite)
fromJSON("https://api.github.com/users/jtleek/repos")
tmp <- https://api.github.com/users/jtleek/repos
tmp<- fromJSON("https://api.github.com/users/jtleek/repos")
length(tmp)
tmp[[1]]
tmp[[2]]
names(tmp)
dim(tmp)
tmp[1]
tmp[1,]
tmp<- fromJSON("https://api.github.com/users/jtleek/repos")
args(fromJSON)
?fromJSON
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData$name
jsonData$owner
jsonData$owner[1]
names(jsonData$owner)
jsonData$owner$login
?toJSON
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris
head(iris)
head(iris)
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
iris2 <- fromJSON(myjson)
iris2
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
install.packages("RMySQL")
library(lars)
library(fields)
install.packages("fields")
set.seed(121202015)
n <- 1
s <- 1
k <- 1
effects =  rnorm(n*5,sd=s/10)
y = rep(c(0,1),each=50)
x = matrix(rnorm(500*100),nrow=500)
x[1:(n*5),] = x[1:(n*5),] + effects %*% t(y)
x2 = matrix(rnorm(500*100),nrow=500)
x2[1:(n*5),] = x2[1:(n*5),] +  effects %*% t(y)
dim(x)
y
l1 = lars(t(x),y)
cv1 = cv.lars(t(x),y)
sval = max(0.05,cv1$index[which.min(cv1$cv)])
sval
predict.lars(l1,t(x2),s=sval,mode="fraction",type="coefficients")
which(predict.lars(l1,t(x2),s=sval,mode="fraction",type="coefficients") > 0)
length(predict.lars(l1,t(x2),s=sval,mode="fraction",type="coefficients"))
names(predict.lars(l1,t(x2),s=sval,mode="fraction",type="coefficients"))
p2 = predict.lars(l1,t(x2),s=sval,mode="fraction",type="coefficients")
which(p2 > 0)
which(p2$coefficients > 0)
which(p2$coefficients != 0)
cv1
names(cv1)
cv1$cv
names(cv1)
cv1$index
cv1$mode
l1 = lars(t(x),y)
cv1 = cv.lars(t(x),y)
sval = max(0.05,cv1$index[which.min(cv1$cv)])
nonzero <- which(predict.lars(l1,t(x),mode="fraction",type="coefficients") >0)
nonzero <- which(predict.lars(l1,t(x),
mode="fraction",type="coefficients")$coefficients >0)
nonzero
length(nonzero)
sval
l1 = lars(t(x),y)
cv1 = cv.lars(t(x),y)
sval = max(0.05,cv1$index[which.min(cv1$cv)])
nonzero <- which(predict.lars(l1,t(x),
mode="fraction",type="coefficients")$coefficients!=0)
nonzero[1]
length(nonzero)
length(predict.lars(l1,t(x),
mode="fraction",type="coefficients")$coefficients)
length(predict.lars(l1,t(x),
mode="fraction",type="coefficients"))
length(predict.lars(l1,t(x),
mode="fraction",type="coefficients",s=sval))
length(predict.lars(l1,t(x),
mode="fraction",type="coefficients",s=sval)$coefficients)
l1 = lars(t(x),y)
cv1 = cv.lars(t(x),y)
sval = max(0.05,cv1$index[which.min(cv1$cv)])
nonzero <- which(predict.lars(l1,t(x), s=sval,
mode="fraction",type="coefficients")$coefficients!=0)
nonzero
length(nonzero)
lm1 <- lm(y ~ x[nonzero,])
dim(x)
lm1 <- lm(y ~ t(x[nonzero,]))
dim(x)
dim(t(x[nonzero,]))
lm1 <- lm(y ~ t(x[nonzero,]))
p1 = predict(lm1,t(x2[nonzero,]))
lm1 <- lm(y ~ t(x[nonzero,]))
p1 = predict(lm1,newdata=t(x2[nonzero,]))
tmpX <- as.data.frame(t(x[nonzero,])
)
tmpX[1,]
tmpX <- as.data.frame(t(x[nonzero,]))
tmpX2 <- as.data.frame(t(x2[nonzero,]))
lm1 <- lm(y ~ tmpX)
p1 = predict(lm1,newdata=tmpX2)
class(tmpX)
lm1 <- lm(y ~ .,data=tmpX)
p1 = predict(lm1,newdata=tmpX2)
p1
table(p1 > 0.5, y)
p1$fit[1]
p1
mean((p1 > 0.5)==y)
source('~/Desktop/leekasso-version2.R')
source('~/Desktop/leekasso-version2.R')
library(RmySQL)
library(RMySQL)
args(dbConnect)
?dbConnect
db="homo_sapiens_core_40_36b"
ensemblDb <- dbConnect(MySQL(), user="anonymous", db=db, host="ensembldb.ensembl.org")
ucscDb <- dbConnect(MySQL(), user="genome", db=db, host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb
dbListTables(ucscDb)
dbDisconnect(ucscDb)
ucscDb
ucscDb <- dbConnect(MySQL(), db="hg19",user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb
dbListTables(ucscDb)
tmp = dbListTables(ucscDb)
tmp[1]
tmp[2]
tmp[3]
tmp[4]
tmp[5]
tmp10
tmp[10]
tmp2 <- dbListFields(con,"affyExonProbeFree")
tmp2 <- dbListFields(ucscDb,"affyExonProbeFree")
length(tmp2)
tmp2
tmp3 <- dbReadTable(ucscDb,"affyExonProbeFree")
dim(tmp3)
tmp3[1,]
tmp3[,2]
tmp3[2,]
tmp3[3,]
library(RODBC)
install.packages("RODBC")
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
rs <- dbSendQuery(ucscDb,"show databases;")
rs
rs
d1 <- fetch(rs)
d1
dbDisconnect(ucscDb)
getwd()
setwd("../009readingMySQL/")
slidify("index.Rmd")
browseURL("index.html")
ucscDb
d1
ucscDb
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
dbGetQuery(ucscDb,"show databases;")
result
dbDisconnect(ucscDb)
?dbDisconnect
ucscDb
hg19 <- dbConnect(MySQL(),user="genome", db="hg19"
host="genome-mysql.cse.ucsc.edu")
dbListTables(hg19)
hg19
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
dbListTables(hg19)
length(allTables)
allTables[1:5]
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
allTables[1:20]
allTables[1:50]
allTables[1:500]
hg19
tmp <- dbListFields(hg19,"affyU133Plus2")
tmp
dbGetQuery("SELECT COUNT(*) FROM affyU133plus2;")
dbGetQuery(hg19, "SELECT COUNT(*) FROM affyU133plus2;")
?dbGetQuery
allTables
allTables[1:20]
allTables[19]
dbGetQuery(hg19, "select count(*) from affyU95")
dbGetQuery(hg19, "select count(*) from affyU133plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
dim(affyData)
affyData[1,]
query
hist(affyData$mismatches)
hist(affyData$misMatches)
query <- dbSendQuery(con, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
dim(affyMis)
affyMis
quan
quantile(affyMiss$misMatch)
class(affyMis)
quantile(affyMis$misMatches)
dbDisconnect(hg19);
dbClearResult(dbListResults(hg19)[[1]])
dbDisconnect(hg19);
slidify("index.Rmd")
hg19
ucscDb
ls()
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
showConnections()
closeAllConnections()
all_cons <- dbListConnections(MySQL())
all_cons
length(all_cons)
q(0)
q()
